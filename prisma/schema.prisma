generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  password     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  addresses    Address[]
  wishlist     UserWishlist[]
  cart         UserCart[]
  orderHistory Order[]   @relation("OrderHistory")
}

enum AddressType {
  HOME
  WORK
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Address {
  id     String      @id @default(uuid())
  type   AddressType
  street String
  city   String
  userId String
  user   User        @relation(fields: [userId], references: [id])
}

enum SellerStatus{
  PENDING
  APPROVED
  REJECTED
}

model Seller {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  status     SellerStatus  @default(PENDING) 
  products  Product[]
  orders    Order[]   @relation("SellerOrders")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           String      @id @default(uuid())
  name         String
  price        Float
  stock        Int
  sellerId     String
  seller       Seller      @relation(fields: [sellerId], references: [id])
  wishlistedBy UserWishlist[]
  inCarts      UserCart[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderItems   OrderItem[]
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  UPI
  BANK_TRANSFER
  COD
}

model Order {
  id            String        @id @default(uuid())
  userId        String
  sellerId      String
  status        OrderStatus
  amount        Float
  user          User          @relation(fields: [userId], references: [id], name: "OrderHistory")
  seller        Seller        @relation(fields: [sellerId], references: [id], name: "SellerOrders")
  orderItems    OrderItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus
  transactionId String?
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model UserWishlist {
  userId    String
  productId String

  createdAt DateTime  @default(now())
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@id([userId, productId])
}

model UserCart {
  userId    String
  productId String

  createdAt DateTime @default(now())
  quantity  Int
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@id([userId, productId])
}